{"version":3,"sources":["Container/location.css","image.jpg","hoc/Aux.js","Container/location.js","Components/Icons.js","Container/Weather.js","App.js","serviceWorker.js","index.js","Container/Weather.css"],"names":["module","exports","Aux","this","props","children","Component","Location","style","className","classes","login","type","name","placeholder","onChange","locationchange","value","onClick","getDataFromDb","icon","defaults","icons","color","size","animate","weather","iconss","data","mydate","Date","year","getYear","day","getDay","month","getMonth","daym","getDate","integer","parseInt","temparature","dispaly_day","dispaly_date","mainwthreerow","agileinfo","date","location","summary","App","state","place","toggle","event","locationob","target","setState","fetch","then","json","res","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd5b5fc5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"location__login___1X4FS\"};","module.exports = __webpack_public_path__ + \"static/media/image.93912e1a.jpg\";","import React, {Component} from 'react'\n\n\nclass Aux extends Component{\n    render() {\n        return(\n            <div>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default Aux;","import React, {Component} from 'react'\nimport Aux from \"../hoc/Aux\";\nimport classes from './location.css'\n\n\n\nclass Location extends Component{\n    render() {\n     const style={\n         \"text-align\":\"center\"\n\n     }\n     var toggle=''\n\n        return(\n            <Aux>\n\n            <div style={style} className={classes.login}>\n\n                <h1>Enter Place Name</h1>\n\n\n                <input type=\"text\" name=\"username\" placeholder=\"Enter the Place\" onChange={this.props.locationchange}/>\n                <input type=\"submit\" name=\"submit\" value=\"Check Weather\" onClick={this.props.getDataFromDb}/>\n\n\n\n            </div>\n            </Aux>\n\n\n\n        )\n    }\n}\n\n\n\nexport default Location","import React,{Component} from 'react'\nimport ReactAnimatedWeather from 'react-animated-weather';\n\nclass icon extends Component{\n    ;\n\n    render(){\n        const defaults = {\n            icon: this.props.icons,\n            color: 'white',\n            size: 51,\n            animate: true\n        };\n\n\n\n        return(\n           <ReactAnimatedWeather\n               icon={defaults.icon}\n               color={defaults.color}\n               size={defaults.size}\n               animate={defaults.animate}\n               />\n\n\n        )\n    }\n}\n\nexport default icon;","import React,{Component} from 'react'\nimport classes from './Weather.css'\nimport Icon from '../../src/Components/Icons'\n\nclass weather extends Component{\n    render() {\n       var iconss=''\n        switch(this.props.data.icons) {\n            case('clear-day'):\n                iconss = 'CLEAR_DAY'\n                break;\n            case('clear-night'):\n                iconss = 'CLEAR_NIGHT'\n                break;\n            case('cloudy'):\n                iconss = 'CLOUDY'\n                break;\n            case('fog'):\n                iconss = 'FOG'\n                break;\n            case('partly-cloudy-day'):\n                iconss = 'PARTLY_CLOUDY_DAY'\n                break;\n            case('partly-cloudy-night'):\n                iconss = 'PARTLY_CLOUDY_NIGHT'\n                break;\n            case('rain'):\n                iconss = 'RAIN'\n                break;\n            case('sleet'):\n                iconss = 'SLEET'\n                break;\n            case('snow'):\n                iconss = 'SNOW'\n                break;\n            case('wind'):\n                iconss = 'WIND'\n                break;\n            default:\n                iconss = ''\n                break;\n        }\n\n        var mydate=new Date()\n        var year=mydate.getYear()\n        if(year<1000)\n            year+=1900\n\n        var day=mydate.getDay()\n        var month=mydate.getMonth()\n        var daym=mydate.getDate()\n        if(daym<10)\n            daym=\"0\"+daym\n        var dayarray=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n        var montharray=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n        var integer = parseInt(this.props.data.temparature, 10)\n        var dispaly_day=dayarray[day]\n        var dispaly_date=daym+\"  \"+montharray[month]+\"  \"+year\n\n        return(\n\n            <div className={classes.mainwthreerow}>\n                <div className={classes.agileinfo}>\n                    <div className={classes.date}>\n                        <p> {dispaly_day}</p>\n                        <p> {dispaly_date}</p>\n                    </div>\n                    <h2>{integer}<span>Â°</span></h2>\n                    <h4>{this.props.location}</h4>\n                    <Icon\n                    icons={iconss}\n                    />\n                    <h6>{this.props.data.summary}</h6>\n\n                    <input type=\"submit\" name=\"submit\" value=\"Check Other City\" onClick={this.props.getDataFromDb}/>\n                </div>\n            </div>\n\n        )\n    }\n}\n\n\nexport default weather","import React, {Component} from 'react';\nimport Aux from '../src/hoc/Aux'\nimport Location from '../src/Container/location'\nimport Weather from  '../src/Container/Weather'\nimport calsses from './App.css'\nimport image from './image.jpg'\n\n\nclass App extends Component{\n\n    state = {\n        data:{\n            place:\"\",\n            temparature:\"\",\n            summary:\"\",\n            icons:\"\"\n        },\n        location:'',\n        toggle:true\n    }\n\n    locationchange = (event)=>{\n         var locationob = {...this.state.location}\n         locationob =event.target.value;\n        this.setState({location:locationob})\n    }\n\n\n\n    getDataFromDb = () => {\n        fetch('/weather?address='+this.state.location+'',\n            {}\n            )\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res},));\n        this.setState({toggle:!this.state.toggle})\n    };\n\n\n\n  render() {\n\n    return(\n        <Aux >\n            {this.state.toggle ?\n                <Location\n                    locationchange={this.locationchange}\n                    getDataFromDb={this.getDataFromDb}\n\n\n                />: <Weather\n                    data={this.state.data}\n                    location={this.state.location}\n                    getDataFromDb={this.getDataFromDb}\n                />\n            }\n\n\n\n        </Aux>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainwthreerow\":\"Weather__mainwthreerow___1pZLb\",\"agileinfo\":\"Weather__agileinfo___2Xcyu\",\"date\":\"Weather__date___2NKBE\",\"main-agileits\":\"Weather__main-agileits___2KJOn\"};"],"sourceRoot":""}